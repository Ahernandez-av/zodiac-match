#!/usr/bin/env node

let app = require('../app');

// catch 404 and render a not-found.hbs template
app.use((req, res, next) => {
  res.status(404);
  res.render('not-found');
});

app.use((err, req, res, next) => {
  // always log the error
  console.error('ERROR', req.method, req.path, err);

  // only render if the error ocurred before sending the response
  if (!res.headersSent) {
    res.status(500);
    res.render('error');
  }
});

var http = require('http').createServer(app);

http.on('error', error => {
  if (error.syscall !== 'listen') { throw error }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`Port ${process.env.PORT} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`Port ${process.env.PORT} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
});

var io = require('socket.io')(http);

//Socket configuration
io.on('connection', (socket) => {
  console.log('a user connected');
  console.log(socket.room)
  socket.on('room', (room) => {
    socket.room = room
    console.log('new room ' + room)
    socket.join(room)
  })
  socket.on('disconnect', () => {
    console.log('user disconnected');
  });
  socket.on('chat message', (msg, user) => {
    console.log(socket.room)
    io.to(socket.room).emit('chat message', msg, user);
  });
});


http.listen(process.env.PORT, () => {
  console.log(`connected ğŸ”Œ`);
});
